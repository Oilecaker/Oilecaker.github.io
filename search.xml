<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>电工实习的~作业</title>
    <url>/2020/03/31/%E7%94%B5%E5%B7%A5%E5%AE%9E%E4%B9%A0%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<hr>
<h1 id="protel的安装"><a href="#protel的安装" class="headerlink" title="protel的安装"></a>protel的安装</h1><ol>
<li>下载压缩文件”proteldxp.rar”<br><img src="/images/pasted-1.png" alt="upload successful"></li>
<li>解压后有a和b两个文件夹<br><img src="/images/pasted-2.png" alt="upload successful">  </li>
</ol>
<p>&emsp;&emsp;2.1 <font face="黑体" color="red">a文件夹</font>，<font color="gray">安装DXP 2004</font> </p>
<p>&emsp;&emsp;a文件夹 -&gt; Setup文件夹 -&gt; Setup.exe(管理员身份运行！)，一路默认安装过去（可以更改安装路径） </p>
<p>&emsp;&emsp;2.2 <font face="黑体" color="red">b文件夹</font>，<font color="gray">补丁，元件库 与 DXP破解</font>  </p>
<p>&emsp;&emsp;&emsp;2.2.1  <font color="black"> 补丁，元件库</font><br>&emsp;&emsp;&emsp;分别运行b文件中的 DXP2004SP2.exe (补丁)和 DXP2004SP2_IntegratedLibraries.exe (元件库)文件<br>&emsp;&emsp;&emsp;(不用管parallel port的错误）<br><img src="/images/pasted-4.png" alt="upload successful"></p>
<p>&emsp;&emsp;&emsp;2.2.2  <font color="black"> 破解 </font><br>&emsp;&emsp;&emsp;b文件夹-&gt; DXP2004crack -&gt;Protel2004破解 -&gt;Protel 2004 SP2 keygen 按照AltiumDXP2004SP2KeyGen.exe内部的教程可以进行破解。</p>
<hr>
<h1 id="PCB板制作"><a href="#PCB板制作" class="headerlink" title="PCB板制作"></a>PCB板制作</h1><ol>
<li>设计-&gt;层堆栈管理器-&gt;菜单-&gt;图层堆栈范例-&gt;单层<br>&emsp;&emsp;改完下面层分布栏会变成，Solder Side就是Bottom Side<br><img src="/images/pasted-9.png" alt="upload successful"></li>
<li>改单位计量，查看-&gt;切换单位</li>
<li>在Mechanical 1层画51mm×80mm矩形范围。(粉红色的线)</li>
<li>取消短接，设计-&gt;规则-&gt;Electrical-&gt;Short-Circuit，取消勾选<br><img src="/images/pasted-10.png" alt="upload successful"></li>
<li>切换到SolderSide层，在右侧元件库按照封装名选择元件，然后添加到工作区。<br><img src="/images/pasted-11.png" alt="upload successful"></li>
</ol>
<p><img src="/images/pasted-12.png" alt="upload successful"><br>6. 现在可以开始连线了！<br>&emsp;-旋转元件：长按元件+空格。<br>&emsp;-连线，不能成锐角和直角。<br>&emsp;-二极管，有横线的一端是负极<br>&emsp;-三极管，1端是箭头流出端<br>&emsp;-焊盘形状，方形为正极，圆形为负极<br>&emsp;-走线，不能交叉<br>&emsp;-焊盘，一些接地右键属性，改标识符GND<br>7. <font color="red">连接器</font>我统一放在下面一排（K1，K2，K3，电源V，电动机M<br>8. 连线完，放置-&gt;字符串,把 <font color="red">学号</font> 放在PCB板左下角。</p>
<hr>
<h1 id="最后成果图"><a href="#最后成果图" class="headerlink" title="最后成果图"></a>最后成果图</h1><hr>
<p><img src="/images/pasted-13.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/31/Hello-World/</url>
    <content><![CDATA[<h2 id="Begin-blogging-process…"><a href="#Begin-blogging-process…" class="headerlink" title="Begin blogging process…"></a>Begin blogging process…</h2>]]></content>
  </entry>
  <entry>
    <title>地图分析</title>
    <url>/2020/04/06/%E5%9C%B0%E5%9B%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<hr>
<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a><strong>题目描述</strong>：</h1><p>你现在手里有一份大小为 N x N 的「地图」（网格） grid，上面的每个「区域」（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，请你找出一个海洋区域，这个海洋区域到离它最近的陆地区域的距离是最大的。</p>
<p>我们这里说的距离是「曼哈顿距离」（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。</p>
<p>如果我们的地图上只有陆地或者海洋，请返回 -1。</p>
<hr>
<h1 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a><strong>问题分析</strong>：</h1><ol>
<li>创建一个N×N随机二维容器（考虑Vector容器），创建地图。  </li>
<li>得到地图中所有值为1的索引值xIndex,yIndex。</li>
<li>changeVector，将值为1的元素，在上下左右进行扩展，如果周围四格中元素值为0，则将其值变为1，得到新地图。</li>
<li>将新地图继续执行第3步，直到所有的值为1，并且声明一个计数值counter，记录执行第3步的次数。</li>
<li>counter值即为最大距离maxDistance。 </li>
</ol>
<hr>
<h1 id="C-代码："><a href="#C-代码：" class="headerlink" title="C++代码："></a><strong>C++代码</strong>：</h1><ol>
<li><p><em>先生成一维随机vector</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void createRamdomVector(vector&lt;int&gt;&amp; obj)&#x2F;&#x2F;产生存储随机0，1的一维随机vector容器</span><br><span class="line">    &#123;</span><br><span class="line">        int size &#x3D; obj.size();&#x2F;&#x2F;得到Vector的大小</span><br><span class="line">        obj.clear();&#x2F;&#x2F;每次清除暂存数据的vector，初始化</span><br><span class="line">        &#x2F;&#x2F;srand((int)(time(NULL)));随机种子生成函数</span><br><span class="line">        for (int i &#x3D; 0; i&lt;size; ++i)&#x2F;&#x2F;插入0，1</span><br><span class="line">        &#123;	</span><br><span class="line">            int randnum &#x3D; rand() % 2;</span><br><span class="line">            obj.push_back(randnum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> <strong>出现问题：</strong>随机种子生成函数不能放在循环执行的函数体内<br> <strong>解决方法：</strong>将其移到main()函数中。</p>
<p>再插入到二维Vector。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void create_TwoDimensional_vector(vector&lt;vector&lt;int&gt; &gt;&amp; obj,int number)&#x2F;&#x2F;建立二维随机Vector</span><br><span class="line">	&#123;</span><br><span class="line">		vector&lt;int&gt;b(number);&#x2F;&#x2F;声明大小为number的一维vector</span><br><span class="line">		for (int i &#x3D; 0; i &lt; b.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			createRamdomVector(b);&#x2F;&#x2F;调用函数，生成一维随机0，1的vector。</span><br><span class="line">			obj.push_back(b);&#x2F;&#x2F;插入到二维Vector中</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><em>得到索引值</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void getIndex(vector&lt;vector&lt;int&gt; &gt;&amp; obj, vector&lt;int&gt;&amp; xIndex,vector&lt;int&gt;&amp; yIndex)&#x2F;&#x2F;xIndex,yIndex</span><br><span class="line">	&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; obj.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; obj[0].size(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                int indexValue &#x3D; obj[i][j];</span><br><span class="line">                if (indexValue &#x3D;&#x3D; 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    xIndex.push_back(i);</span><br><span class="line">                    yIndex.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><em>声明全局变量方向数组dx，dy，以及计数器counter。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int dx[] &#x3D; &#123; 1,-1,0,0 &#125;;</span><br><span class="line">int dy[] &#x3D; &#123; 0,0,1,-1 &#125;;</span><br></pre></td></tr></table></figure></li>
<li><p><em>changeVector，将1周围（上、下、左、右）的0都变为0。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void changeVector(vector&lt;vector&lt;int&gt; &gt;&amp; obj)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;int&gt; xIndex;</span><br><span class="line">        vector&lt;int&gt; yIndex;</span><br><span class="line">        getIndex(obj, xIndex, yIndex);</span><br><span class="line">		int size&#x3D;obj.size();</span><br><span class="line">        </span><br><span class="line">        for (int j &#x3D; 0; j &lt; xIndex.size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 4; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                int x &#x3D; xIndex[j] + dx[i];</span><br><span class="line">                int y &#x3D; yIndex[j] + dy[i];</span><br><span class="line"></span><br><span class="line">                if ((x &lt; 0)||(x&gt;size-1))continue;</span><br><span class="line">                if ((y &lt; 0)||(y&gt;size-1))continue;</span><br><span class="line"></span><br><span class="line">                int indexValue &#x3D; obj[x][y];</span><br><span class="line">                if (indexValue &#x3D;&#x3D; 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    obj[x][y] &#x3D; 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><em>循环执行changeVector，每执行一次counter加1，已知最大距离2×obj.size(),如果地图全为1，跳出循环。这里涉及到跳出双重循环，声明一个flag值。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int maxDistance(vector&lt; vector&lt;int&gt; &gt;&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">	int counter &#x3D; 0;</span><br><span class="line">	vector&lt;vector&lt;int&gt; &gt;::iterator iter;</span><br><span class="line">	for (int j &#x3D; 0; j &lt; ( 2 * obj.size() ); ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		int flag &#x3D; 0;</span><br><span class="line">		for (iter &#x3D; obj.begin(); iter !&#x3D; obj.end(); ++iter)</span><br><span class="line">		&#123;</span><br><span class="line">			for (int i &#x3D; 0; i &lt; (*iter).size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				if ((*iter)[i] &#x3D;&#x3D; 0)</span><br><span class="line">				&#123;</span><br><span class="line">					flag &#x3D; 1;</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			if (flag &#x3D;&#x3D; 1)break;</span><br><span class="line">		&#125;</span><br><span class="line">		if (flag &#x3D;&#x3D; 1)</span><br><span class="line">		&#123;</span><br><span class="line">			changeVector(obj);</span><br><span class="line">			cout &lt;&lt;endl&lt;&lt;counter+1 &lt;&lt; &quot;change:&quot; &lt;&lt;endl;</span><br><span class="line">			output_TwoDimensional_vector(obj);</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">			counter +&#x3D; 1;</span><br><span class="line">		&#125;</span><br><span class="line">		else break;&#x2F;&#x2F;全为1时跳出。	</span><br><span class="line">	&#125;	</span><br><span class="line">	return counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><em>其它辅助函数,输出二维数组，方便中途观察地图变化。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void output_TwoDimensional_vector(vector&lt;vector&lt;int&gt; &gt;&amp; a)&#x2F;&#x2F;输出二维vector</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Vector:&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;迭代器输出</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt;::iterator iter;</span><br><span class="line">        for (iter &#x3D; a.begin(); iter !&#x3D; a.end(); ++iter)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; (*iter).size(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; (*iter)[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">        &#x2F;&#x2F;数组索引输出</span><br><span class="line">          for (int i &#x3D; 0; i &lt; a.size(); ++i)</span><br><span class="line">          &#123;</span><br><span class="line">              for (int j &#x3D; 0; j &lt; a[0].size(); ++j)</span><br><span class="line">              &#123;</span><br><span class="line">                  cout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">              &#125;</span><br><span class="line">              cout &lt;&lt; endl;</span><br><span class="line">          &#125;</span><br><span class="line">        *&#x2F;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><em>main函数</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	srand((int)(time(NULL)));&#x2F;&#x2F;生成时间种子</span><br><span class="line">	vector&lt;vector&lt;int&gt; &gt;a;</span><br><span class="line">	create_TwoDimensional_vector(a,10);</span><br><span class="line">	output_TwoDimensional_vector(a);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; &quot;maxDistance is:&quot; &lt;&lt; maxDistance(a);</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h1 id="调试结果"><a href="#调试结果" class="headerlink" title="调试结果"></a>调试结果</h1><p>4×4地图：<br><img src="/images/pasted-0.png" alt="upload successful"></p>
<p>10×10地图：<br><img src="/images/pasted-14.png" alt="upload successful"></p>
<hr>
<h1 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h1><ul>
<li>vector使用（迭代器），二维Vector的建立</li>
<li>srand随机数</li>
<li>跳出双重循环</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Vector</tag>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>LL(1)文法</title>
    <url>/2020/04/28/Untitled/</url>
    <content><![CDATA[<h1 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h1><p>课程回放“自顶向下文法分析”，时间40:00</p>
<ul>
<li>对《编译技术》课程<strong>第四章作业</strong>的解析</li>
</ul>
<hr>
<h2 id="作业实例"><a href="#作业实例" class="headerlink" title="作业实例"></a>作业实例</h2><p>文法：G：S&rarr;SS+|SS*|a</p>
<h3 id="提取左因子"><a href="#提取左因子" class="headerlink" title="提取左因子:"></a>提取左因子:</h3><p>S&rarr;SA|a<br>A&rarr;S+|S*</p>
<h3 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h3><p>S&rarr;aB<br>B&rarr;AB|$\varepsilon$<br>A&rarr;SC<br>C&rarr;+|*</p>
<h3 id="求First集"><a href="#求First集" class="headerlink" title="求First集"></a>求First集</h3><p>First(S)={a}<br>First(A)={a}<br>First(B)={a,$\varepsilon$}<br>First(C)={+,* }</p>
<h3 id="求Follow集"><a href="#求Follow集" class="headerlink" title="求Follow集"></a>求Follow集</h3><p><strong>Follow集求法的一般规则</strong></p>
<ol>
<li>对于S开始符号，Follow(S)={$}</li>
<li>如果存在一个产生式A&rarr;$\alpha$B$\beta$,则First($\beta$)除去{$\varepsilon$}之外的所有符号都在Follow(B)中。</li>
<li>如果存在一个产生式A&rarr;$\alpha$B,或者存在产生式A&rarr;$\alpha$B$\beta$，并且First($\beta$)中包含$\varepsilon$，那么Follow(A)的符号都在Follow(B)中。</li>
</ol>
<p><strong>问题求解过程</strong></p>
<ol>
<li>Follow(S)，根据A&rarr;SC，First(C)填入{a,$}</li>
<li>Follow(A)，B&rarr;AB,First(B)填入；</li>
<li>Follow(B),<br>&rArr;B&rarr;AB<br>&rArr;AB&rarr;AAB<br>&rArr;A&rarr;SC，S&rarr;aB代入，AB&rarr;ASCB&rarr;AaBCB<br>所以，Follow(B)=First(C)-{$\varepsilon$}={+,* } $\cup$ {$}</li>
<li>AB&rarr;ASCB&rarr;AaBCB, Follow(C)=First(B)-{$\varepsilon$}={a}<br>根据<strong>一般规则3.</strong>, First(B)包含$\varepsilon$，所以Follow(B)包含在Follow(C)中</li>
</ol>
<p><strong>Follow集</strong><br>Follow(S)={a,$}</p>
<p>Follow(A)={a,$}</p>
<p>Follow(B)={+,* ,$}</p>
<p>Follow(C)={a,+,* ,$}</p>
<h3 id="判断是否是LL-1-文法"><a href="#判断是否是LL-1-文法" class="headerlink" title="判断是否是LL(1)文法"></a>判断是否是LL(1)文法</h3><p>根据龙书，一个文法G是LL(1)文法，当且仅当对于G的每个非终结符Α的任何两个不同产生式<br>Α→α,Α→β均满足下面条件(其中α和β不能同时推出ε):<br>1、FIRST(α)∩FIRST(β)=Φ<br>2、假若β=&gt;* ε，那么FIRST(α)∩FOLLOW(A)＝Φ</p>
<p><img src="/images/pasted-18.png" alt="upload successful"></p>
<h3 id="构建LL-1-分析表"><a href="#构建LL-1-分析表" class="headerlink" title="构建LL(1)分析表"></a>构建LL(1)分析表</h3><p>对应PPT<br><img src="/images/pasted-15.png" alt="upload successful"><br><img src="/images/pasted-16.png" alt="upload successful"></p>
<h3 id="LL-1-分析过程模拟"><a href="#LL-1-分析过程模拟" class="headerlink" title="LL(1)分析过程模拟"></a>LL(1)分析过程模拟</h3><p>PPT的例子：<br><img src="/images/pasted-17.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>编译技术</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>LL(1)</tag>
      </tags>
  </entry>
</search>
